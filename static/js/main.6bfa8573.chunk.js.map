{"version":3,"sources":["../backend/markdown sync /^/.//.*/.md$","../backend/markdown/test.md","../backend/markdown/tester.md","../backend/markdown/testerino.md","components/NotesDir.js","components/MDInputForm.js","components/MDPreview.js","adapters/index.js","components/Note.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["map","./test.md","./tester.md","./testerino.md","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","NotesDir","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","files","require","console","log","setState","react_default","a","createElement","file","Link","to","concat","React","Component","MDInputForm","onChange","props","handleChange","onSubmit","handleSubmit","htmlFor","name","type","value","newNote","title","text","MDPreview","markdown","_this$props$note","note","marked","dangerouslySetInnerHTML","__html","NotesAdapter","createClass","key","route","fetch","then","r","json","options","method","headers","Content-Type","body","JSON","stringify","Note","defineProperty","target","preventDefault","create","initState","_this2","path","response","prevState","match","params","fileName","loadFile","prevProps","snapshot","className","components_MDInputForm","components_MDPreview","Routes","Switch","Route","exact","component","App","components_NotesDir","routes","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bfa8573.chunk.js","sourcesContent":["var map = {\n\t\"./test.md\": 32,\n\t\"./tester.md\": 33,\n\t\"./testerino.md\": 34\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 31;","module.exports = __webpack_public_path__ + \"static/media/test.7cdf4467.md\";","module.exports = __webpack_public_path__ + \"static/media/tester.cf674609.md\";","module.exports = __webpack_public_path__ + \"static/media/testerino.b0b37e9a.md\";","import React from 'react'\nimport { Link } from \"react-router-dom\";\n\nclass NotesDir extends React.Component {\n  constructor() {\n    super() \n    this.state = {\n      files: []\n    }\n  }\n\n  componentWillMount() {\n    const files = require('../files.json')\n    console.log(files)\n    this.setState({files})\n  }\n\n  render() {\n    return (\n      <div id=\"notes-dir\">\n        <h1>Files</h1>\n        {\n          this.state.files.map((file) => {\n            return <Link to={`/notes/${file}`}>{file}</Link>\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default NotesDir","import React from 'react'\n\nclass MDInputForm extends React.Component {\n  render() {\n    return (\n      <form \n        onChange={this.props.handleChange} \n        onSubmit={this.props.handleSubmit}\n      >\n        <label htmlFor=\"title\">title</label>\n        <input \n          id=\"title\" \n          name=\"title\" \n          type=\"text\"\n          value={this.props.newNote.title}\n        /> \n        <label htmlFor=\"text\">text</label>\n        <textarea \n          id=\"text\" \n          name=\"text\"\n          value={this.props.newNote.text}\n        />\n        <button>Submit</button>\n      </form>\n    )\n  }\n}\n\nexport default MDInputForm","import React from 'react'\nimport marked from 'marked'\n\nclass MDPreview extends React.Component {\n  constructor() {\n    super() \n    this.state = {\n      markdown: \"\"\n    }\n  }\n\n  render() {\n    const { title, text } = this.props.note;\n    const markdown = marked(text)\n    return (\n      <div id=\"md-preview\">\n        <h1>Preview of: {title}</h1>\n        <div dangerouslySetInnerHTML={{__html: markdown}}></div>\n      </div>\n    )\n  }\n}\n\nexport default MDPreview","const notesUrl = \"http://localhost:8100\"\n\nexport class NotesAdapter {\n  static getOne(route) {\n    return fetch(`${notesUrl}/notes/${route}`).then(r=>r.json())\n  }\n  static create(note) {\n    let options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(note)\n    }\n    return fetch(`${notesUrl}/notes`, options)\n      .then(r => r.json())\n  }\n}","import React from 'react';\nimport MDInputForm from './MDInputForm'\nimport MDPreview from './MDPreview'\nimport {NotesAdapter} from '../adapters'\n\nclass Note extends React.Component {\n\n  constructor() {\n    super()\n    this.initState = {\n      title: \"\",\n      text: \"\",\n    }\n    this.state = this.initState\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    NotesAdapter.create(this.state)\n  }\n\n  loadFile(title) {\n    let path = require('../../backend/markdown/' + title + \".md\")\n    fetch(path)\n    .then(response => {\n      return response.text()\n    })\n    .then(text => {   \n      this.setState((prevState) => ({\n        title,\n        text\n      }));\n    })\n  }\n\n  // handles initial load of the page \n  componentDidMount() {\n    if (this.props.match.params.fileName) { this.loadFile(this.props.match.params.fileName) }\n  }\n\n  // handles every time we switch notes\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.match.params.fileName !== prevProps.match.params.fileName) { this.loadFile(this.props.match.params.fileName); }\n  }\n\n  render() {\n    return (\n      <div className=\"note\">\n        <MDInputForm \n          handleChange = {this.handleChange}\n          handleSubmit = {this.handleSubmit}\n          newNote = {this.state}\n        />\n        <MDPreview \n          note = {this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Note","import React from \"react\"\nimport {Switch, Route} from \"react-router-dom\"\nimport Note from '../components/Note'\n\nconst Routes = (props) => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Note} />\n      <Route exact path=\"/notes/:fileName\" component={Note} />\n      {/* <Route exact path=\"/videos\" component={VideosPage} />\n      <Route exact path=\"/videos/new\" component={NewVideoPage} />\n      <Route exact path=\"/videos/:id\" component={VideoPage} />\n      <Route exact path=\"/users\" component={UsersPage} />\n      <Route exact path=\"/users/:username\" component={UserPage} />\n      <Route exact path=\"/signup\" component={SignUpPage} />\n      <Route exact path=\"/login\" component={LoginPage} /> */}\n      <Route path=\"*\" component={Note} />\n    </Switch>\n  )\n}\n\nexport default Routes","import React from 'react';\nimport './App.css';\nimport NotesDir from './components/NotesDir'\nimport Routes from './routes'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NotesDir />\n        <Routes />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  \n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}